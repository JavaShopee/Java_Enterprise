
It's not just verifying that code works now, you are providing the facility that code works in future.

JNUIT 4 > 10 Years
Not been updated with newer testing pattterns.
It has been updated with new language features(Java has evolved significannlty in last 10 yes)
Monolithic architecture
Bugs piled up in Junit 4

PLATFORM(Engine what runs the test cases)
junit-jupiter-api
Jupiter is an API whcih informs the Engine what test to run, how to run
junit-jupiter-engine
Vintage : Backword compatibility with JUnit 4
junit-vintage-engine
Extenstions : Creating your own extenstion and have the platform to run the tests

Programmet can either use  PLATFORM + Jupiter OR PLATFORM + Vintage or PLATFORM + Extensions to write the test cases.


IDEs uses paltform to run the test cases



package com.demo.junit.JunitDemo;

import static org.mockito.Mockito.*;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import junit.framework.TestCase;

public class TestCalc extends TestCase {
	
	Calculator calc= null;
	CalculatorService service = Mockito.mock(CalculatorService.class);
	
	@Before
	public void setUp()
	{
		calc = new Calculator(service);
	}
	@Test
	public void testAdd()
	{
		when(service.add(2,3)).thenReturn(5);
		assertEquals(10,calc.perform(2,3));
	}

}


***********************************************

package com.demo.junit.JunitDemo;
public class Calculator 
{
	CalculatorService service;
  
  public Calculator(CalculatorService service) {
		super();
		this.service = service;
	}


	public int perform(int i, int j)
	{
		return service.add(i,j)*i;
	}
}
***********************************************
package com.demo.junit.JunitDemo;

public interface CalculatorService 
{
	int add(int i,int j);

}


*************************************************

assertEquals(expected, actual)
assertArrayEquals(expected array, actual array)
assertIterableEquals(expected array, actual array)

*************************************************

assertThrows(ArithmeticException.class, ()-> utils.divide(1,0));

**************************************************


LifeCycyle Hook

@BeforeAll : runs when even the instance is creatd. Therefore, the method has to be static
@AfterAll : runs when even the instance is destroyed. Therefore, the method has to be static

@BeforeEach
@AfterEach

**********************************************
Display in place of method name

@Test
@DisplayName("Display the name")
public void testMe()
{
   assertEquals(11,utils.add(6, 5));
}
**********************************************
@Disabled : Don't run the test case
Skip the test case 
**********************************************

Conditional Execution

@EnabledOnOS(OS.LINUX)
@EnabledIf


assertALL()>> Only in JUnit 5, takes collection of executables as parameter.

@Test
@DisplayName("Display the name")
public void testMe()
{
   assertALL(
    ()-> assertEquals(4,utils.multyply(2,2)),
    ()-> assertEquals(2,utils.multyply(2,1))
   
   );
}

*****************************************

@Nested : When you want to group the similar test cases together

public class MathUtilsTests 
{
	
	MathUtils utils = new MathUtils();
	@Before
	public void setUp()
	{
	   utils = new MathUtils();
	}
	@Nested
	class TestAdd
	{
		@Test
		public void testForPositive()
		{
		   assertEquals(11,utils.add(6, 5));
		}
		@Test
		public void testForNegative()
		{
		   assertEquals(-2,utils.add(-1, -1));
		}
	}
	@SuppressWarnings("deprecation")
	@Test
	public void testcomputeCircleArea()
	{
		assertEquals(315.1592653589793,utils.computeCircleArea(10),1.1);
		
	}
	
	
	
}

******************************************
DisplayName can be method level or class level annotation

****************************************


@RepeatedTest(3)
public void testcomputeCircleArea(Repetitioninfo repetitionInfo)
{
    assertEquals(315.1592653589793,utils.computeCircleArea(10),1.1);
}
****************************************
@Tag("Math")
@Tag("Circle")

Run Math Tags Only
