@RequestMapping

@Controller
public class HomeController {

	@RequestMapping("/home")
	public ModelAndView  home(@RequestParam("name") String name)
	{	  
      ModelAndView mv = new ModelAndView();
	    mv.addObject("name",name);
	    mv.setViewName("home");
	    return mv;
	}
}


Sending form Data in Spring Boot app:

package com.example.demo;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class HomeController {

	@RequestMapping("/home")
	public ModelAndView home(Students studs)
	{
		ModelAndView mv = new ModelAndView();
		mv.addObject("obj",studs);
		mv.setViewName("home");
		return mv;
	}
}


With Just a Model class, here Students is model class



@RequestMapping("/home")
	public ModelAndView getStuds(Students stud)
	{
		ModelAndView mv = new ModelAndView();
		mv.setViewName("sample.jsp");
		mv.addObject("studs",stud);
		return mv;
	}
***************************************************************************************
@RequestBody

Automatic deserilization of HTTPRequestBody onto a java object.Generally used with @PostMapping annotation.
enabling automatic deserialization of the inbound HttpRequest body onto a Java object.

@PostMapping("/request")
public ResponseEntity postController(
  @RequestBody LoginForm loginForm) {
  
    exampleService.fakeAuthenticate(loginForm);
    return ResponseEntity.ok(HttpStatus.OK);
}
@ResponseBody

@ResponseBody annotation tells a controller that the object returned is automatically serialized into JSON
and passed back into the HttpResponse object.

@RequestMapping("/stud")
@ResponseBody
public List<Students> findAll()
	{
		return repo.findAll();
	}

******************************************************Request Param*************************************


@RequestMapping("/home")
	public ModelAndView home(@RequestParam("name") String name)
	{
		ModelAndView mv = new ModelAndView();
		mv.setViewName("sample.jsp");
		mv.addObject("name",name);
		return mv;
	}
	
RequestParam is JSP/Servlet based , try to serach query paramters in URL	
******************Query and Repo **************************************************************************************************	
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

@Repository
public interface StudRepo extends JpaRepository<Students, Integer>
{
    List<Students> findByTech(String tech);
     
     @Query("from Students where tech=?1 order by name")
     List<Students> findByTechSorted(String tech);

*********************************Path Variable************************************************************************
@RequestMapping("/find/{roll}")
	@ResponseBody
	public Students findMe(@PathVariable("roll") int roll)
	{
		return repo.findById(roll).get();
	}
	
PathVariable is REST Annotation
RequestParam  is JSP /Servlet
*********************************************Post MApping/ Requets Body**************************************
@PostMapping(path="/addme")
	@ResponseBody
	public Students GetIt(@RequestBody Students stud)
	{
		 repo.save(stud);
		 return stud;
	}
	
	
*******************************REST Annotations***************************************************************************



@GET
	@Produces({javax.ws.rs.core.MediaType.APPLICATION_XML,javax.ws.rs.core.MediaType.APPLICATION_JSON})
	public List<Students> getStuds()
	{
		
		return repo.getAll();
	}
	
	@GET
	@Path("/stud/{id}")
	@Produces({javax.ws.rs.core.MediaType.APPLICATION_XML,javax.ws.rs.core.MediaType.APPLICATION_JSON})
	public Students getStud(@PathParam("id") int id)
	{
		
		StudsRepo repo = new StudsRepo();
		return repo.getMe(id);
	}
	
	@POST
	@Path("/stud")
	@Consumes({javax.ws.rs.core.MediaType.APPLICATION_XML,javax.ws.rs.core.MediaType.APPLICATION_JSON})
	public Students addStud(Students stud)
	{
		repo.saveStud(stud);
		return stud;
	}
	
	
	
	


web.xml


<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" id="WebApp_ID" version="3.1">
  <display-name>NewDynamo</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
  
  
  <servlet>
        <servlet-name>Jersey Web Application</servlet-name>
        <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
        <init-param>
            <param-name>jersey.config.server.provider.packages</param-name>
            <param-value>com.demo</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>Jersey Web Application</servlet-name>
        <url-pattern>/*</url-pattern>
    </servlet-mapping>
</web-app>
