Spring Bean

Spring has a bean factory, that referes to xml config file. The bean factory is responsible for creating required beans for us.

: 
The default behaviour  : The creation of bean(after referring to spring.xml) happens when application context is being initialized 
NOT WHEN THE GETBEAN METHOD IS CALLED
When getbean happesn, AC handsover the bean that are already created ==>> Scopes

Singleton >> It's default
Prototype  >> Create a new bean with every new geatBean()

Web aware context bean scopes :
Request : New bean per servelt request
Session : New Bean per session 
Global Session : New Bean per global Http Session(portlet context)

Setter and Constructor Injection :

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN"
        "http://www.springframework.org/dtd/spring-beans-2.0.dtd">

<beans>

     <bean id="triangle" class="org.frame.sachin.Triangle">
        <!--     <property name="shape" value="Equilateral"></property> -->
        <!--   <constructor-arg type="java.lang.String" value="Equi"></constructor-arg>
               <constructor-arg type="int" value="20"></constructor-arg> -->
        
         <constructor-arg index="0" value="Equi"></constructor-arg>
        <constructor-arg index="1" value="20"></constructor-arg>
        
        
     </bean>

</beans>

  
package org.frame.sachin;

public class Triangle {

	private String shape;
	private int height;
	public Triangle(String shape, int height) {
		super();
		this.shape = shape;
		this.height = height;
	}
//	public String getShape() {
//		return shape;
//	}
//	public void setShape(String shape) {
//		this.shape = shape;
//	}
//	public int getHeight() {
//		return height;
//	}
//	public void setHeight(int height) {
//		this.height = height;
//	}
	
	
	public void draw()
	{
		System.out.println(shape + " " + height );
	}
}



package org.frame.sachin;

import org.springframework.beans.factory.BeanFactory;
import org.springframework.beans.factory.xml.XmlBeanFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.core.io.FileSystemResource;

public class CreateBean 
{
    public static void main(String[] args) 
    {
//    	BeanFactory factory = new XmlBeanFactory(new FileSystemResource("spring.xml"));
//    	Triangle triangle = (Triangle) factory.getBean("triangle");
//    	triangle.draw();
		
    	ApplicationContext context = new ClassPathXmlApplicationContext("spring.xml");
    	Triangle triangle1 = (Triangle) context.getBean("triangle");
    	triangle1.draw();
    }
}



One Bean is dependent on another bean :

<beans>

    <bean id="triangle" class="com.sachin.demo.Triangle">
		<property name="pointA" ref="pointa"></property>
		<property name="pointB" ref="pointb"></property>
		<property name="pointC" ref="pointc"></property>
    </bean>
    
	<bean id="pointa" class="com.sachin.demo.Point">
		<property name="x" value="0"></property>
		<property name="y" value="0"></property>
    </bean>
    
    <bean id="pointb" class="com.sachin.demo.Point">
		<property name="x" value="20"></property>
		<property name="y" value="0"></property>
    </bean>
    
    <bean id="pointc" class="com.sachin.demo.Point">
		<property name="x" value="-20"></property>
		<property name="y" value="0"></property>
    </bean>
	

</beans>

Initializing Collections

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN"
        "http://www.springframework.org/dtd/spring-beans-2.0.dtd">

<beans>

	<bean id="triangle" class="com.sachin.demo.Triangle">
		<property name="point">
			<list>
				<ref bean="pointa" />
				<ref bean="pointb" />
				<ref bean="pointc" />
			</list>
		</property>
	</bean>

	<bean id="pointa" class="com.sachin.demo.Point">
		<property name="x" value="0"></property>
		<property name="y" value="0"></property>
	</bean>

	<bean id="pointb" class="com.sachin.demo.Point">
		<property name="x" value="20"></property>
		<property name="y" value="0"></property>
	</bean>

	<bean id="pointc" class="com.sachin.demo.Point">
		<property name="x" value="-20"></property>
		<property name="y" value="0"></property>
	</bean>


</beans>


Inner Bean


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN"
        "http://www.springframework.org/dtd/spring-beans-2.0.dtd">


<beans>
	<bean id="triangle" class="com.demo.bean.Triangle">
		<property name="pointA">
			<bean class="com.demo.bean.Points">
				<property name="x" value="0"></property>
				<property name="y" value="0"></property>
			</bean>

		</property>
		<property name="pointB" ref="point2"></property>
		<property name="pointC" ref="point3"></property>
	</bean>

	<bean id="point2" class="com.demo.bean.Points">
		<property name="x" value="20"></property>
		<property name="y" value="0"></property>
	</bean>
	<bean id="point3" class="com.demo.bean.Points">
		<property name="x" value="-20"></property>
		<property name="y" value="0"></property>
	</bean>
	
	<alias name="triangle" alias="tri"/>
</beans>




Autowire By Name : When bean id  = property name 
Autowire By Type : When bean type  = property type
Autowire By Constructor  : When bean type  = property type

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN"
        "http://www.springframework.org/dtd/spring-beans-2.0.dtd">


<beans>
	<bean id="triangle" class="com.demo.bean.Triangle" autowire="byName">
	</bean>

	<bean id="pointA" class="com.demo.bean.Points">
		<property name="x" value="0"></property>
		<property name="y" value="0"></property>
	</bean>
	<bean id="pointB" class="com.demo.bean.Points">
		<property name="x" value="20"></property>
		<property name="y" value="0"></property>
	</bean>
	<bean id="pointC" class="com.demo.bean.Points">
		<property name="x" value="-20"></property>
		<property name="y" value="0"></property>
	</bean>
</beans>



Application Context Aware
When parent bean happes to be singleton whereas children happes to be prototype, child will get initiliazed as soon as ApplicationContext 
is initialized.
In that case we need to have hold on Application Context. 

import org.springframework.beans.BeansException;
import org.springframework.beans.factory.BeanNameAware;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

public class Triangle implements ApplicationContextAware, BeanNameAware
{
	
	private Points pointA;
	private Points pointB;
	private Points pointC;
	ApplicationContext context;
	String bean;
	
	
	public Points getPointA() {
		return pointA;
	}
	public void setPointA(Points pointA) {
		this.pointA = pointA;
	}
	public Points getPointB() {
		return pointB;
	}
	public void setPointB(Points pointB) {
		this.pointB = pointB;
	}
	public Points getPointC() {
		return pointC;
	}
	public void setPointC(Points pointC) {
		this.pointC = pointC;
	}
	public void draw()
	{
		System.out.println(getPointA().getX() + " " + getPointA().getY());
		System.out.println(getPointB().getX() + " " + getPointB().getY());
		System.out.println(getPointC().getX() + " " + getPointC().getY());
		
	}
	@Override
	public void setApplicationContext(ApplicationContext context) throws BeansException {
		this.context = context;
	}
	@Override
	public void setBeanName(String bean) {
		System.out.println(bean);
	}
	
}




***********************************************Bean Defination Inheritence********************************************************
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN"
        "http://www.springframework.org/dtd/spring-beans-2.0.dtd">
<beans>
	<bean id="triangle1" class="com.sachin.demo.Triangle">
		<property name="point">
			<list>
				<ref bean="pointA"></ref>
				<ref bean="pointB"></ref>
			</list>
		</property>
	</bean>
	<bean id="triangle2" class="com.sachin.demo.Triangle" parent="triangle1">
		<property name="point">
			<list merge="true">
				<ref bean="pointC"></ref>
			</list>
		</property>
	</bean>
	<bean id="pointA" class="com.sachin.demo.Points">
		<property name="x" value="0"></property>
		<property name="y" value="0"></property>
	</bean>
	<bean id="pointB" class="com.sachin.demo.Points">
		<property name="x" value="20"></property>
		<property name="y" value="0"></property>
	</bean>
	<bean id="pointC" class="com.sachin.demo.Points">
		<property name="x" value="-20"></property>
		<property name="y" value="0"></property>
	</bean>
</beans>



**************************InitializingBean, DisposableBean LifeCycle Hook***************************************************************************************



package com.demo.sample;

import org.springframework.beans.factory.DisposableBean;
import org.springframework.beans.factory.InitializingBean;

public class Triangle implements InitializingBean, DisposableBean
{

	private Points pointA;
	private Points pointB;
	private Points pointC;
	public Points getPointA() {
		return pointA;
	}
	public void setPointA(Points pointA) {
		this.pointA = pointA;
	}
	public Points getPointB() {
		return pointB;
	}
	public void setPointB(Points pointB) {
		this.pointB = pointB;
	}
	public Points getPointC() {
		return pointC;
	}
	public void setPointC(Points pointC) {
		this.pointC = pointC;
	}
	@Override
	public void destroy() throws Exception {
		System.out.println("Call me bfore destroying");
		
	}
	@Override
	public void afterPropertiesSet() throws Exception {
		System.out.println("Call me once properties are set");
		
	}
	
	public void init()
	{
		System.out.println("Initialize Customized Method");
	}
	public void dest()
	{
		System.out.println("Destroy Customized Method");
	}
	
	public void draw()
	{
		System.out.println(getPointA().getX() + " " + getPointA().getY());
		System.out.println(getPointB().getX() + " " + getPointB().getY());
		System.out.println(getPointC().getX() + " " + getPointC().getY());
	}
}




<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN"
        "http://www.springframework.org/dtd/spring-beans-2.0.dtd">
<beans>
   <bean id="triangle" class="com.demo.sample.Triangle" autowire="byName" init-method="init" destroy-method="dest">
   </bean>
   
   <bean id="pointA" class="com.demo.sample.Points">
     <property name="x" value="0"></property>
     <property name="y" value="0"></property>
   </bean>
   <bean id="pointB" class="com.demo.sample.Points">
     <property name="x" value="20"></property>
     <property name="y" value="0"></property>
   </bean>
   <bean id="pointC" class="com.demo.sample.Points">
     <property name="x" value="-20"></property>
     <property name="y" value="0"></property>
   </bean>

</beans>
**********************BeanPostProcessor Before and after Initilizing each and every bean*********************************


package com.demo.sample;

import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.BeanPostProcessor;

public class DispalyBeanName implements BeanPostProcessor
{

	@Override
	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
		System.out.println("postProcessAfterInitialization" + beanName);
		return bean;
		
	}

	@Override
	public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
		System.out.println("postProcessBeforeInitialization" + beanName);
		return bean;
	}

}

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN"
        "http://www.springframework.org/dtd/spring-beans-2.0.dtd">
<beans>
   <bean id="triangle" class="com.demo.sample.Triangle" autowire="byName" init-method="init" destroy-method="dest">
   </bean>
   
   <bean id="pointA" class="com.demo.sample.Points">
     <property name="x" value="0"></property>
     <property name="y" value="0"></property>
   </bean>
   <bean id="pointB" class="com.demo.sample.Points">
     <property name="x" value="20"></property>
     <property name="y" value="0"></property>
   </bean>
   <bean id="pointC" class="com.demo.sample.Points">
     <property name="x" value="-20"></property>
     <property name="y" value="0"></property>
   </bean>
   
   <bean class="com.demo.sample.DispalyBeanName"></bean>

</beans>




********************BeanFactoryPostProcessor pre Instantiate Singleton********************************************************************


package com.demo.sample;

import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;

public class FactDemo implements BeanFactoryPostProcessor
{

	@Override
	public void postProcessBeanFactory(ConfigurableListableBeanFactory arg0) throws BeansException {
		System.out.println("postProcessBeanFactory method is called");
		
	}

}





<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN"
        "http://www.springframework.org/dtd/spring-beans-2.0.dtd">
<beans>
	<bean id="triangle" class="com.demo.sample.Triangle" autowire="byName">
	</bean>

	<bean id="pointA" class="com.demo.sample.Points">
		<property name="x" value="0"></property>
		<property name="y" value="0"></property>
	</bean>
	<bean id="pointB" class="com.demo.sample.Points">
		<property name="x" value="20"></property>
		<property name="y" value="0"></property>
	</bean>
	<bean id="pointC" class="com.demo.sample.Points">
		<property name="x" value="-20"></property>
		<property name="y" value="0"></property>
	</bean>

	<bean class="com.demo.sample.FactDemo"></bean>

</beans>




*********property Place Holder Configurer is out of the box BeanFactoryPostProcessor which initializes property pre Instantiate Singleton*********************************************


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN"
        "http://www.springframework.org/dtd/spring-beans-2.0.dtd">
<beans>
	<bean id="triangle" class="com.demo.sample.Triangle"
		autowire="byName">
	</bean>

	<bean id="pointA" class="com.demo.sample.Points">
		<property name="x" value="${pointA.pointX}"></property>
		<property name="y" value="${pointA.pointY}"></property>
	</bean>
	<bean id="pointB" class="com.demo.sample.Points">
		<property name="x" value="20"></property>
		<property name="y" value="0"></property>
	</bean>
	<bean id="pointC" class="com.demo.sample.Points">
		<property name="x" value="-20"></property>
		<property name="y" value="0"></property>
	</bean>

	<bean class=" org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="pointsconfig.properties"></property>
	</bean>

</beans>

pointA.pointX=0
pointA.pointY=0


********************************************************************************************************************



























https://www.youtube.com/watch?v=GB8k2-Egfv0&list=PLGibysfsUS7NAbefiaj1V4LbX0glTftDI
